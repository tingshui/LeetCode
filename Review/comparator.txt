// 第一种
class Solution {
    class Pair{
        Integer value;
        Integer index;
        Pair(int value, int index){
            this.value = value;
            this.index = index;
        }
        Integer getValue(){
            return value;
        }
    }
    class valueComparator implements Comparator<Pair>{
        @Override
        public int compare(Pair p1, Pair p2){
            return p1.getValue().compareTo(p2.getValue());
        }
    }
    public int[] twoSum(int[] nums, int target) {
        Pair[] pairlist = new Pair[nums.length];
        for (int i = 0; i < nums.length; i++){
            pairlist[i] = new Pair(nums[i], i);
        }
        Arrays.sort(pairlist, new valueComparator());
}

// 第二种
class Solution {
    class Pair implements Comparable<Pair>{
        Integer value;
        Integer index;
        Pair (int value, int index){
            this.value = value;
            this.index = index;
        }
        Integer getValue(){
            return value;
        }
        @Override
        public int compareTo(Pair other){
            return this.getValue().compareTo(other.getValue());
        }
    }
    
    public int[] twoSum(int[] nums, int target) {
        Arrays.sort(pairlist);
 }
 
 // 同第一种，只是不用integer
 class Pair {
    public int x, y, val;
    public Pair(int x, int y, int val) {
        this.x = x;
        this.y = y;
        this.val = val;
    }
}
class PairComparator implements Comparator<Pair> {
    public int compare(Pair a, Pair b) {
        return a.val - b.val;
    }
}
// 注意要在开PriorityQueue时候添加comparator, 不然后续无法比较不能添加
PriorityQueue<Pair> minHeap = new PriorityQueue<Pair>(k, new PairComparator());
